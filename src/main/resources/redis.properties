redis.host=127.0.0.1
redis.port=6379
redis.pass=
redis.database=0
redis.timeout=0
redis.usePool=true
redis.enableTransactionSupport=true

# 控制一个 pool 可分配多少个 jedis 实例，通过 pool.getResource() 来获取；如果赋值为 - 1，则表示不限制；
# 如果 pool 已经分配了 maxActive 个 jedis 实例，则此时 pool 的状态为 exhausted。
redis.maxTotal=300
# 控制一个 pool 最少有多少个状态为 idle(空闲) 的 jedis 实例
redis.minIdle=100
# 控制一个 pool 最多有多少个状态为 idle(空闲) 的 jedis 实例
redis.maxIdle=300
# 表示当 borrow 一个 jedis 实例时，最大的等待时间，如果超过等待时间，则直接抛出 JedisConnectionException
redis.maxWaitMillis=5000
# 在 borrow 一个 jedis 实例时，是否提前进行 alidate 操作；如果为 true，则得到的 jedis 实例均是可用的
redis.testOnBorrow=true
# return 一个 jedis 实例给 pool 时，是否检查连接可用性（ping()）
redis.testOnReturn=true
# 如果为 true，表示有一个 idle object evitor 线程对 idle object 进行扫描，如果 validate 失败，此 object 会被从 pool 中 drop 掉；
# 这一项只有在 timeBetweenEvictionRunsMillis 大于 0 时才有意义
redis.testWhileIdle=true
# 表示 idle object evitor 两次扫描之间要 sleep 的毫秒数
redis.timeBetweenEvictionRunsMillis=30000
# 表示一个对象至少停留在 idle 状态的最短时间，然后才能被 idle object evitor 扫描并驱逐；这一项只有在 timeBetweenEvictionRunsMillis 大于 0 时才有意义
redis.minEvictableIdleTimeMillis=60000
#表示 idle object evitor 每次扫描的最多的对象数
redis.numTestsPerEvictionRun=3
# 在 minEvictableIdleTimeMillis 基础上，加入了至少 minIdle 个对象已经在 pool 里面了。如果为 - 1，evicted 不会根据 idle time 驱逐任何对象。
# 如果 minEvictableIdleTimeMillis>0，则此项设置无意义，且只有在 timeBetweenEvictionRunsMillis 大于 0 时才有意义
redis.softMinEvictableIdleTimeMillis=
